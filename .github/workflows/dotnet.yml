name: .NET CI (v1.0)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Allow publishing check runs for test result summaries
permissions:
  contents: read
  checks: write

jobs:
  install_ci:
    name: Install CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: npm ci
        run: npm ci --no-audit --no-fund

      - name: Pack node_modules
        run: tar -czf node_modules.tgz node_modules package.json package-lock.json server.js public eventlist.txt

      - name: Upload Node deps artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-deps
          path: node_modules.tgz

      - name: Setup .NET 9 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore (tests)
        run: dotnet restore tests/TaskTracker.V1.Tests/TaskTracker.V1.Tests.csproj

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [install_ci]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 9 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Build (Debug)
        run: dotnet build -c Debug tests/TaskTracker.V1.Tests/TaskTracker.V1.Tests.csproj

      - name: Publish .NET build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-test-binaries
          path: |
            tests/TaskTracker.V1.Tests/bin/Debug/net9.0/
            tests/TaskTracker.V1.Tests/TaskTracker.V1.Tests.csproj

  build_artifacts:
    name: Build artifacts
    runs-on: ubuntu-latest
    needs: [install_ci, build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Node deps
        uses: actions/download-artifact@v4
        with:
          name: node-deps
          path: .

      - name: Download .NET build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dotnet-test-binaries
          path: tests/TaskTracker.V1.Tests/bin/Debug/net9.0/

      - name: Create CI bundle artifact
        run: tar -czf ci-bundle.tgz node_modules.tgz tests/TaskTracker.V1.Tests/bin/Debug/net9.0/ tests/TaskTracker.V1.Tests/TaskTracker.V1.Tests.csproj package.json package-lock.json server.js public eventlist.txt

      - name: Upload CI bundle
        uses: actions/upload-artifact@v4
        with:
          name: ci-bundle
          path: ci-bundle.tgz

  test:
    name: Run tests
    runs-on: ubuntu-latest
    needs: [build_artifacts]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 9 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Download CI bundle
        uses: actions/download-artifact@v4
        with:
          name: ci-bundle
          path: .

      - name: Unpack CI bundle
        run: |
          tar -xzf ci-bundle.tgz
          tar -xzf node_modules.tgz

      - name: Test
        run: |
          mkdir -p artifacts/TestResults
          dotnet test -c Debug tests/TaskTracker.V1.Tests/TaskTracker.V1.Tests.csproj --logger "trx;LogFileName=test-results.trx" --results-directory artifacts/TestResults

      - name: List TRX files (debug)
        if: always()
        run: |
          echo "Workspace: $(pwd)"
          echo "Listing artifacts/TestResults:"
          ls -la artifacts || true
          ls -la artifacts/TestResults || true

      - name: Upload TRX results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-trx
          path: artifacts/TestResults/

      - name: Publish unit test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: artifacts/TestResults/**/*.trx

  # deploy:
  #     name: Deploy to Vercel via hooks
  #     runs-on: ubuntu-latest
  #     needs: [test]  # only runs if tests job succeeded
  #     steps:
  #       - name: Trigger Vercel Preview deploy (PR)
  #         if: ${{ github.event_name == 'pull_request' }}
  #         run: | 
  #           curl -sSf -X POST "${{ secrets.VERCEL_DEPLOY_HOOK_PREVIEW }}" \ 
  #             -H "Content-Type: application/json" \
  #             -d "{\"commit\":\"${GITHUB_SHA}\",\"branch\":\"${GITHUB_HEAD_REF}\",\"runId\":\"${GITHUB_RUN_ID}\"}"

  #       - name: Trigger Vercel Production deploy (main)
  #         if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main') }}
  #         run: |
  #           curl -sSf -X POST "${{ secrets.VERCEL_DEPLOY_HOOK_PRODUCTION }}" \
  #             -H "Content-Type: application/json" \
  #             -d "{\"commit\":\"${GITHUB_SHA}\",\"branch\":\"${GITHUB_REF_NAME}\",\"runId\":\"${GITHUB_RUN_ID}\"}"
